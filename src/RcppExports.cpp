// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// mult_diag
arma::mat mult_diag(const arma::mat& x, const arma::vec& d);
RcppExport SEXP _estimatr_mult_diag(SEXP xSEXP, SEXP dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type d(dSEXP);
    rcpp_result_gen = Rcpp::wrap(mult_diag(x, d));
    return rcpp_result_gen;
END_RCPP
}
// mat_sqrt_inv
arma::mat mat_sqrt_inv(const arma::mat& X);
RcppExport SEXP _estimatr_mat_sqrt_inv(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_sqrt_inv(X));
    return rcpp_result_gen;
END_RCPP
}
// lm_robust_helper
List lm_robust_helper(const arma::vec& y, const arma::mat& X, const Rcpp::Nullable<Rcpp::NumericVector>& cluster, const bool& ci, const String type, const std::vector<bool>& which_covs);
RcppExport SEXP _estimatr_lm_robust_helper(SEXP ySEXP, SEXP XSEXP, SEXP clusterSEXP, SEXP ciSEXP, SEXP typeSEXP, SEXP which_covsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Rcpp::NumericVector>& >::type cluster(clusterSEXP);
    Rcpp::traits::input_parameter< const bool& >::type ci(ciSEXP);
    Rcpp::traits::input_parameter< const String >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const std::vector<bool>& >::type which_covs(which_covsSEXP);
    rcpp_result_gen = Rcpp::wrap(lm_robust_helper(y, X, cluster, ci, type, which_covs));
    return rcpp_result_gen;
END_RCPP
}
